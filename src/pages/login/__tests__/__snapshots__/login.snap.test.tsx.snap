// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
  style={
    Object {
      "flex": 1,
      "justifyContent": "center",
      "paddingHorizontal": 20,
    }
  }
>
  <View>
    <Text>
      E-mail
    </Text>
    <TextInput
      onChangeText={[MockFunction]}
      placeholder="email@fleye..."
      value=""
    />
    <Text>
      Password
    </Text>
    <TextInput
      onChangeText={[MockFunction]}
      placeholder="********"
      value=""
    />
    <View
      accessibilityRole="button"
      accessibilityState={
        Object {
          "disabled": false,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          disabled={false}
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "margin": 8,
                "textAlign": "center",
              },
            ]
          }
        >
          Login
        </Text>
      </View>
    </View>
  </View>
</RCTSafeAreaView>
`;

exports[`renders correctly while loading 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
  style={
    Object {
      "flex": 1,
      "justifyContent": "center",
      "paddingHorizontal": 20,
    }
  }
>
  <View>
    <Text>
      E-mail
    </Text>
    <TextInput
      onChangeText={[MockFunction]}
      placeholder="email@fleye..."
      value="ismael.sousa@fleye.com.br"
    />
    <Text>
      Password
    </Text>
    <TextInput
      onChangeText={[MockFunction]}
      placeholder="********"
      value="123456"
    />
    <View
      accessibilityRole="button"
      accessibilityState={
        Object {
          "disabled": true,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
            Object {},
          ]
        }
      >
        <Text
          disabled={true}
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "margin": 8,
                "textAlign": "center",
              },
              Object {
                "color": "#cdcdcd",
              },
            ]
          }
        >
          Login
        </Text>
      </View>
    </View>
  </View>
</RCTSafeAreaView>
`;

exports[`renders correctly with email 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
  style={
    Object {
      "flex": 1,
      "justifyContent": "center",
      "paddingHorizontal": 20,
    }
  }
>
  <View>
    <Text>
      E-mail
    </Text>
    <TextInput
      onChangeText={[MockFunction]}
      placeholder="email@fleye..."
      value="ismael.sousa@fleye.com.br"
    />
    <Text>
      Password
    </Text>
    <TextInput
      onChangeText={[MockFunction]}
      placeholder="********"
      value=""
    />
    <View
      accessibilityRole="button"
      accessibilityState={
        Object {
          "disabled": false,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          disabled={false}
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "margin": 8,
                "textAlign": "center",
              },
            ]
          }
        >
          Login
        </Text>
      </View>
    </View>
  </View>
</RCTSafeAreaView>
`;

exports[`renders correctly with email and password 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
  style={
    Object {
      "flex": 1,
      "justifyContent": "center",
      "paddingHorizontal": 20,
    }
  }
>
  <View>
    <Text>
      E-mail
    </Text>
    <TextInput
      onChangeText={[MockFunction]}
      placeholder="email@fleye..."
      value="ismael.sousa@fleye.com.br"
    />
    <Text>
      Password
    </Text>
    <TextInput
      onChangeText={[MockFunction]}
      placeholder="********"
      value="123456"
    />
    <View
      accessibilityRole="button"
      accessibilityState={
        Object {
          "disabled": false,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          disabled={false}
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "margin": 8,
                "textAlign": "center",
              },
            ]
          }
        >
          Login
        </Text>
      </View>
    </View>
  </View>
</RCTSafeAreaView>
`;

exports[`renders correctly with password 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
  style={
    Object {
      "flex": 1,
      "justifyContent": "center",
      "paddingHorizontal": 20,
    }
  }
>
  <View>
    <Text>
      E-mail
    </Text>
    <TextInput
      onChangeText={[MockFunction]}
      placeholder="email@fleye..."
      value=""
    />
    <Text>
      Password
    </Text>
    <TextInput
      onChangeText={[MockFunction]}
      placeholder="********"
      value="123456"
    />
    <View
      accessibilityRole="button"
      accessibilityState={
        Object {
          "disabled": false,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          disabled={false}
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "margin": 8,
                "textAlign": "center",
              },
            ]
          }
        >
          Login
        </Text>
      </View>
    </View>
  </View>
</RCTSafeAreaView>
`;
